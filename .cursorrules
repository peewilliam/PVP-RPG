# Regras e Convenções do Projeto MMORPG Topdown Isométrico

## Padrões de Comunicação

### Eventos de Rede
- Todos os eventos utilizam o formato `categoria:ação` (ex: `player:move`, `monster:spawn`)
- Eventos são definidos no arquivo `shared/constants/gameConstants.js`
- Fluxo de comunicação segue o padrão "cliente envia comando, servidor processa e retorna estado"

### Fluxo de Sincronização de Jogadores
1. **Conexão Inicial**: Servidor envia ID único via `player:init`
2. **Notificação de Novos Jogadores**: Servidor notifica todos via `player:joined`
3. **Sincronização de Jogadores Existentes**: Servidor envia informações via `player:existing`
4. **Comandos de Movimento**:
   - Cliente envia comandos (não posições) via `player:move`
   - Servidor atualiza posição, calcula rotação e notifica todos via `player:moved`
5. **Desconexão**: Servidor notifica todos via `player:disconnected`

### Sincronização de Entidades do Mundo
1. **Inicialização do Mundo**: Servidor envia todos os objetos do mundo e monstros via `world:init`
2. **Atualizações do Mundo**: Servidor envia apenas entidades próximas ao jogador via `world:update`
3. **Processamento de Entidades**: Cliente usa presenters específicos para cada tipo de entidade:
   - `MonsterPresenter` para monstros
   - `WorldObjectPresenter` para objetos do mundo

## Padrões de Arquitetura

### MCP (Model-Controller-Presenter)
- **Model**: No servidor, contém toda a lógica de jogo e o estado das entidades
- **Controller**: No servidor, interpreta inputs e orquestra lógica de alto nível
- **Presenter**: No cliente, responsável apenas pela renderização e inputs

### Regra de Servidor Autoritativo
- O servidor é a única fonte de verdade para o estado do jogo
- O cliente envia apenas intenções/comandos, nunca posições finais
- Toda lógica de jogo, colisão e validação acontece no servidor

## Convenções de Código

### Estrutura de Arquivos
- `/client`: Todo código do lado do cliente
- `/server`: Todo código do lado do servidor
- `/shared`: Código e constantes compartilhadas

### Padrões de Robustez
- Sempre validar dados recebidos antes de processá-los
- Utilizar try/catch para lidar com exceções em funções críticas
- Tratar erros de forma explícita para evitar crashes
- Validar valores numéricos para evitar NaN

### Tratamento de Eventos Assíncronos
- Todos os handlers de eventos do geckos.io devem ser tratados com try/catch
- Logs de erro devem ser descritivos para facilitar depuração

## Padrões de Implementação

### Renderização com Three.js
- Câmera isométrica usando OrthographicCamera
- Cada tipo de entidade possui sua própria representação visual:
  - Jogadores: cubos azuis com cone verde indicando direção
  - Monstros: cubos vermelhos com cone laranja indicando direção
  - Árvores: cilindro marrom (tronco) com cone verde (copa)
  - Rochas: esfera irregular cinza
  - Arbustos: esfera verde
  - Casas: cubo com telhado triangular
  - Cercas: caixa fina e comprida
- A câmera segue o jogador mantendo vista isométrica

### Movimento
- Movimento baseado em velocidade e não em posições absolutas
- Velocidade padrão definida em PLAYER.SPEED
- Inputs são processados a cada frame, mas posições são atualizadas pelo servidor
- Movimentação é relativa à orientação da câmera isométrica:
  - W (para frente): move na direção (x-1, z-1)
  - S (para trás): move na direção (x+1, z+1)
  - A (para esquerda): move na direção (x-1, z+1)
  - D (para direita): move na direção (x+1, z-1)

### Rotação
- Rotação do personagem é calculada pelo servidor com base na direção do movimento
- A direção de movimento determina o ângulo de rotação em incrementos de 45 graus (8 direções)
- Em visão isométrica, os ângulos de rotação são ajustados para que o personagem aponte na direção oposta ao movimento:
  - W (frente): mover para Noroeste, apontar para Sudeste (1.25π radianos)
  - S (trás): mover para Sudeste, apontar para Noroeste (0.25π radianos)
  - A (esquerda): mover para Sudoeste, apontar para Nordeste (1.75π radianos)
  - D (direita): mover para Nordeste, apontar para Sudoeste (0.75π radianos)
  - W+D: mover para Norte, apontar para Sul (1.0π radianos)
  - W+A: mover para Oeste, apontar para Leste (1.5π radianos)
  - S+D: mover para Leste, apontar para Oeste (0.5π radianos)
  - S+A: mover para Sul, apontar para Norte (0.0π radianos)
- O servidor envia a rotação calculada junto com a atualização de posição
- O mouse será usado apenas para apontar habilidades, não para rotacionar o personagem

### Sistema de Colisão
- Implementado pelo `CollisionSystem` no servidor
- Usa camadas de colisão (layers) para definir quais entidades colidem entre si
- Matriz de colisão define interações: jogadores colidem com monstros e objetos do mundo, mas não entre si
- Raios de colisão específicos para cada tipo de entidade:
  - Jogadores: 0.5 unidades
  - Monstros: 0.6 unidades
  - Objetos do mundo: variável por tipo (árvores: 0.8, rochas: 1.2, etc.)
- Resolução de colisão empurra entidades para fora umas das outras
- Sistema de depuração via variável de ambiente `DEBUG_COLLISIONS`

### Sincronização de Estado
- O loop do servidor roda a 20 ticks por segundo (50ms)
- Atualizações de estado são enviadas apenas quando houver mudanças
- Estado do mundo é enviado apenas para entidades próximas ao jogador (otimização)

## Sistema de Combate

1. O sistema de combate usa o padrão `CombatSystem` que processa todas as interações de dano entre entidades.

2. Atualmente as habilidades não estão aplicando dano aos alvos. Este é um bug conhecido que precisa ser corrigido, provavelmente na integração entre `CombatSystem` e os métodos `takeDamage` das entidades.

3. Habilidades são configuradas em `shared/skills/skillsConfig.js`:
   - ID 1: FIREBALL (Bola de Fogo) - Tipo projétil
   - ID 2: TELEPORT (Teleporte) - Tipo mobilidade
   - ID 3: FROST_SPIKES (Estacas de Gelo) - Tipo área
   - ID 4: METEOR_STORM (Chuva de Meteoros) - Tipo zona

4. A morte do jogador resulta em perda de todo progresso (XP e nível) e respawn no ponto inicial.

## Sistema de Rede

1. Eventos para o sistema de combate:
   - `player:useAbility` (cliente → servidor)
   - `player:abilityUsed` (servidor → cliente)
   - `combat:damageDealt` (servidor → cliente)
   - `combat:floatingText` (servidor → cliente)
   - `player:death` (servidor → cliente)
   - `player:respawn` (servidor → cliente)

2. O servidor é a única fonte de verdade para o estado do jogo. O cliente envia apenas intenções/comandos.

## Convenções de Implementação

1. Presenters no cliente são acessados com métodos consistentes:
   - `playerPresenter.getPlayer(id)` - Retorna o mesh de um jogador
   - `monsterPresenter.getMonster(id)` - Retorna o mesh de um monstro

2. Quando mexer no sistema de combate, verificar a integração completa:
   - Processamento no servidor (`CombatSystem`)
   - Aplicação de dano (`takeDamage` nas entidades)
   - Emissão de eventos (`COMBAT.DAMAGE_DEALT`, etc.)
   - Processamento visual no cliente (`FloatingTextManager`)

3. Quando implementar novas habilidades, seguir o padrão existente e garantir que todas as camadas estejam implementadas de forma consistente.

## Outras Convenções

[...Manter o conteúdo existente...] 